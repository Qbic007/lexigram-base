import { Telegraf, Context } from 'telegraf';
import { message } from 'telegraf/filters';
import { Markup } from 'telegraf';
import { UserService } from './services/user.service';
import { TranslationService } from './services/translation.service';
import { DictionaryService } from './services/dictionary.service';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN is not set in .env file');
}

const bot = new Telegraf<Context>(process.env.BOT_TOKEN);
const userService = new UserService();
const translationService = new TranslationService();
const dictionaryService = new DictionaryService();

// –ü—Ä–æ—Å—Ç–∞—è Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map<number, any>();

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', async (ctx: Context) => {
  if (!ctx.from) return;
  
  const userId = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name;

  try {
    await userService.createUser(userId);
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã\n\n` +
      '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n' +
      '‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
      '‚Ä¢ /dictionary - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å\n\n' +
      '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ, –∏ —è –µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥—É!'
    );
    userStates.set(ctx.from.id, {});
  } catch (error) {
    console.error('Error in /start command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
bot.command('add', async (ctx: Context) => {
  try {
    if (!ctx.from) return;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥"');
    userStates.set(ctx.from.id, { state: 'adding_word' });
  } catch (error) {
    console.error('Error in add command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤–∞—Ä—è
bot.command('dictionary', async (ctx: Context) => {
  try {
    if (!ctx.from) return;
    const words = await dictionaryService.getUserDictionary(ctx.from.id);
    if (!words || words.length === 0) {
      await ctx.reply('–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ, –∏ —è –µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥—É.');
      return;
    }
    await ctx.reply('–í–∞—à —Å–ª–æ–≤–∞—Ä—å:');
    for (const item of words) {
      const message = `${item.word} - ${item.translation}`;
      await ctx.reply(message, Markup.inlineKeyboard([
        [Markup.button.callback('‚úèÔ∏è', `edit_${item._id}`), Markup.button.callback('üóëÔ∏è', `delete_${item._id}`)]
      ]));
    }
  } catch (error) {
    console.error('Error in dictionary command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
bot.command('translate', async (ctx: Context) => {
  try {
    if (!ctx.from) return;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
    userStates.set(ctx.from.id, { state: 'translating' });
  } catch (error) {
    console.error('Error in translate command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx: Context) => {
  if (!ctx.from || !ctx.message || typeof (ctx.message as any).text !== 'string') return;

  const text = (ctx.message as any).text;
  const userId = ctx.from.id;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
  if (text.startsWith('/')) {
    return;
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç "üìö –ú–µ–Ω—é"
  if (text === 'üìö –ú–µ–Ω—é') {
    await ctx.reply(
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
      '‚Ä¢ /dictionary - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å\n\n' +
      '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ, –∏ —è –µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥—É!'
    );
    return;
  }

  try {
    const stateObj = userStates.get(ctx.from.id) || {};
    if (!stateObj.state) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
      const translation = await translationService.translate(text);
      await ctx.reply(
        `–ü–µ—Ä–µ–≤–æ–¥: ${translation}`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –î–æ–±–∞–≤–∏—Ç—å', `confirm_${text}_${translation}`),
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_translation')
          ]
        ])
      );
      userStates.set(ctx.from.id, {});
      return;
    }
    switch (stateObj.state) {
      case 'adding_word': {
        const [word, translation] = text.split(' - ').map((s: string) => s.trim());
        if (!word || !translation) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ
          if (word) {
            try {
              const translatedWord = await translationService.translate(word);
              userStates.set(ctx.from.id, { state: 'confirming_translation', word, translation: translatedWord });
              await ctx.reply(
                `–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–µ—Ä–µ–≤–æ–¥: ${translatedWord}`,
                Markup.inlineKeyboard([
                  [
                    Markup.button.callback('‚úÖ –î–æ–±–∞–≤–∏—Ç—å', `confirm_${word}_${translatedWord}`),
                    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_translation')
                  ]
                ])
              );
              return;
            } catch (error) {
              console.error('Error translating word:', error);
              await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥"');
              return;
            }
          }
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥"');
          return;
        }
        await dictionaryService.addWord(ctx.from.id, word, translation);
        await ctx.reply('–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!');
        userStates.set(ctx.from.id, {});
        break;
      }
      case 'translating': {
        const translation = await translationService.translate(text);
        await ctx.reply(`–ü–µ—Ä–µ–≤–æ–¥: ${translation}`);
        userStates.set(ctx.from.id, {});
        break;
      }
      case 'editing_word': {
        const [newWord, newTranslation] = text.split(' - ').map((s: string) => s.trim());
        if (!newWord || !newTranslation) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥"');
          return;
        }
        await dictionaryService.updateWord(ctx.from.id, stateObj.wordId, newWord, newTranslation);
        await ctx.reply('–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
        userStates.set(ctx.from.id, {});
        break;
      }
    }
  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
// TODO: –∑–∞–º–µ–Ω–∏—Ç—å any –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∏–∑ telegraf, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
bot.action(/^edit_(.+)$/, async (ctx: any) => {
  try {
    if (!ctx.from) return;
    const wordId = ctx.match[1];
    const dictionary = await dictionaryService.getUserDictionary(ctx.from.id);
    const wordToEdit = dictionary.find((item: any) => item._id === wordId);
    if (!wordToEdit) {
      await ctx.answerCbQuery('–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    userStates.set(ctx.from.id, { state: 'editing_word', wordId });
    await ctx.reply(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ "${wordToEdit.word} - ${wordToEdit.translation}"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥"`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in edit action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action(/^delete_(.+)$/, async (ctx: any) => {
  try {
    if (!ctx.from) return;
    const wordId = ctx.match[1];
    await dictionaryService.deleteWord(ctx.from.id, wordId);
    await ctx.answerCbQuery('–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ');
    await ctx.deleteMessage();
  } catch (error) {
    console.error('Error in delete action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.action(/^confirm_(.+)_(.+)$/, async (ctx: any) => {
  try {
    if (!ctx.from) return;
    const word = ctx.match[1];
    const translation = ctx.match[2];
    await dictionaryService.addWord(ctx.from.id, word, translation);
    await ctx.editMessageText(`–°–ª–æ–≤–æ "${word} - ${translation}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!`);
    userStates.set(ctx.from.id, {});
  } catch (error) {
    console.error('Error confirming translation:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
  }
});

bot.action('cancel_translation', async (ctx: any) => {
  try {
    if (!ctx.from) return;
    await ctx.editMessageText('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.');
    userStates.set(ctx.from.id, {});
  } catch (error) {
    console.error('Error canceling translation:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('Bot started');
}).catch((error) => {
  console.error('Error starting bot:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 