import { Telegraf, Markup, Context, NarrowedContext } from 'telegraf';
import dotenv from 'dotenv';
import path from 'path';
import { TranslationService } from './services/translation.service';
import { DictionaryService } from './services/dictionary.service';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN is not set in .env file');
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
const translationService = TranslationService.getInstance();
const dictionaryService = DictionaryService.getInstance();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf<Context>(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
const menuKeyboard = Markup.keyboard([
  ['üìö –ú–µ–Ω—é']
]).resize();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx: Context) => {
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.',
    menuKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
bot.hears('üìö –ú–µ–Ω—é', async (ctx: Context) => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å', 'view_dictionary')],
    [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'back')]
  ]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx: Context) => {
  if (!ctx.message || typeof ctx.message !== 'object' || !('text' in ctx.message)) {
    return;
  }
  const text = ctx.message.text;
  
  if (text === 'üìö –ú–µ–Ω—é') {
    return; // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
  }

  try {
    const translation = await translationService.translateWord(text);
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å', `add_${text}`)]
    ]);
    await ctx.reply(`–ü–µ—Ä–µ–≤–æ–¥: ${translation}`, keyboard);
  } catch (error) {
    console.error('Translation error:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
bot.action(/^add_(.+)$/, async (ctx: any) => { // ctx.match: [string, string]
  if (!ctx.from) {
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  const word = ctx.match[1];
  try {
    const translation = await translationService.translateWord(word);
    await dictionaryService.addWordToDictionary(ctx.from.id, word, translation);
    await ctx.answerCbQuery('–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!');
  } catch (error) {
    console.error('Error adding word to dictionary:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
bot.action('view_dictionary', async (ctx: Context) => {
  if (!ctx.from) {
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  try {
    const dictionary = await dictionaryService.getUserDictionary(ctx.from.id);
    if (dictionary.length === 0) {
      await ctx.editMessageText('–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç');
      return;
    }
    await ctx.editMessageText('–í–∞—à —Å–ª–æ–≤–∞—Ä—å:');
    for (const item of dictionary) {
      const message = `${item.word} - ${item.translation}`;
      await ctx.reply(message, Markup.inlineKeyboard([
        [Markup.button.callback('‚úèÔ∏è', `edit_${item._id}`), Markup.button.callback('üóëÔ∏è', `delete_${item._id}`)]
      ]));
    }
  } catch (error) {
    console.error('Error getting dictionary:', error);
    await ctx.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
bot.action(/^edit_(.+)$/, async (ctx: any) => { // ctx.match: [string, string]
  await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
bot.action(/^delete_(.+)$/, async (ctx) => {
  if (!ctx.from) {
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  const wordId = ctx.match[1];
  const userId = ctx.from.id;
  
  try {
    await dictionaryService.deleteWord(userId, wordId);
    await ctx.answerCbQuery('–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ');
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
    await ctx.deleteMessage();
  } catch (error) {
    console.error('Error deleting word:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
bot.action('back', async (ctx: Context) => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å', 'view_dictionary')],
    [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'back')]
  ]);
  await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('Bot started');
  })
  .catch((error) => {
    console.error('Error starting bot:', error);
  });

// –í–∫–ª—é—á–∞–µ–º graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 